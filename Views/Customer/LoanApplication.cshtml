@* Ensure your model is defined if your form strongly types to it,
    otherwise, you can remove it if all inputs are manually named.
    If the form is NOT shown, this model isn't strictly used by this page directly. *@
@* @model CredWise_Trail.Models.LoanApplication *@
@using System.Text.Json
@{
    ViewData["Title"] = "Apply for Loan";
    // This will be null if ShowLoanForm is false and KYC is not approved.
    var loanProducts = ViewBag.LoanProducts as List<CredWise_Trail.Models.LoanProduct>;
    bool showLoanForm = (bool?)ViewData["ShowLoanForm"] ?? false; // Default to false if not set
    string kycPageLink = ViewData["KycPageLink"] as string;
    string kycPageLinkText = ViewData["KycPageLinkText"] as string;
    string kycStatus = ViewData["KycStatus"] as string;
    string kycStatusClass = "";
    if (!string.IsNullOrEmpty(kycStatus))
    {
        switch (kycStatus.ToLower()) // Use ToLower for case-insensitive comparison
        {
            case "pending":
                kycStatusClass = "text-warning"; // Bootstrap's yellow text
                break;
            case "rejected":
                kycStatusClass = "text-danger";  // Bootstrap's red text
                break;
            case "not submitted":
                kycStatusClass = "text-secondary"; // A muted/grey color for not submitted
                break;
            default:
                kycStatusClass = "text-info"; // Default color for other statuses like "Approved" (though "Approved" wouldn't typically show here)
                break;
        }
    }
    var restrictedProducts = ViewData["RestrictedLoanProducts"] as Dictionary<int, string> ?? new Dictionary<int, string>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - MyBank</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>

        body {
            background-color: #f0f2f5;
            margin: 0;
        }

        .card-form-container {
            border: 1px solid #e9ecef;
            border-radius: 0.75rem;
            box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, .04);
            background-color: #ffffff;
            max-width: 700px;
            width: 100%;
            margin: 2rem auto;
        }

            .card-form-container .card-header {
                background-color: #f8f9fa;
                border-bottom: 1px solid #e9ecef;
                font-weight: 600;
                color: #343a40;
                font-size: 1.25rem;
                padding: 1rem 1.5rem;
                text-align: center;
            }

            .card-form-container .card-body {
                padding: 1.5rem;
            }

        .btn-primary {
            background-color: #3E92CC;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            border: none;
        }

            .btn-primary:hover {
                background-color: #0A2463;
                border-color: white;
            }

        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
            color: white;
        }

            .btn-info:hover {
                background-color: #138496;
                border-color: #117a8b;
            }

        .input-group-text {
            background-color: #e9ecef;
            border-right: none;
            color: #495057;
        }

        .form-control.no-left-border {
            border-left: none;
        }

        .validation-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .alert {
            width: 100%;
            margin-bottom: 1rem;
        }


        /* **NEW STYLES**: Add these styles for the pop-up modal */
        .modal-content-custom {
            border-radius: 0.75rem;
            border: none;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);
        }

        .modal-header-custom {
            background-color: #0A2463;
            color: #ffffff;
            border-bottom: none;
            padding: 1rem 1.5rem;
        }

            .modal-header-custom .modal-title {
                font-weight: 600;
                font-size: 1.2rem;
            }

            .modal-header-custom .btn-close {
                filter: invert(1) grayscale(100%) brightness(200%);
            }

        .modal-body-custom {
            padding: 2rem 1.5rem;
            font-size: 1.1rem;
            color: #495057;
            text-align: center;
        }

        .modal-footer-custom {
            border-top: 1px solid #e9ecef;
            padding: 0.75rem 1.5rem;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="card-form-container shadow">
        <div class="card-header">
            <i class="fas fa-file-alt"></i> Apply for a Loan
        </div>
        <div class="card-body">
            @* Display All TempData Messages Consistently *@
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
            }
            @if (TempData["WarningMessage"] != null)
            {
                <div class="alert alert-warning">@TempData["WarningMessage"]</div>
            }
            @if (TempData["InfoMessage"] != null)
            {
                <div class="alert alert-info">@TempData["InfoMessage"]</div>
            }

            @if (showLoanForm)
            {
                <form id="loanApplicationForm" asp-action="ApplyForLoan" asp-controller="Customer" method="post">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label for="loanProductName" class="form-label"><i class="fas fa-piggy-bank me-2 text-secondary"></i>Loan Product Name:</label>
                        <select class="form-select" id="loanProductName" name="loanProductId" required>
                            <option value="" disabled selected>Select a loan product</option>
                            @if (loanProducts != null) // Check if loanProducts is available
                            {
                                foreach (var product in loanProducts)
                                {
                                    <option value="@product.LoanProductId"
                                            data-interest-rate="@product.InterestRate"
                                            data-min-amount="@product.MinAmount"
                                            data-max-amount="@product.MaxAmount"
                                            data-max-tenure="@product.Tenure">
                                        @product.ProductName
                                    </option>
                                }
                            }
                            else
                            {
                                <option value="" disabled>No loan products available at this moment.</option>
                            }
                        </select>
                        @Html.ValidationMessage("loanProductId", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        <label for="interestRate" class="form-label"><i class="fas fa-percentage me-2 text-secondary"></i>Interest Rate (%):</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-percent"></i></span>
                            <input type="number" class="form-control no-left-border" id="interestRate" name="interestRate" disabled readonly>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="loanAmount" class="form-label"><i class="bi bi-currency-rupee me-2 text-secondary"></i>Loan Amount:</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-coins"></i></span>
                            <input type="number" class="form-control no-left-border" id="loanAmount" name="loanAmount" required placeholder="Enter desired loan amount" step="any" min="1">
                        </div>
                        <div id="loanAmountValidation" class="validation-message"></div>
                        @Html.ValidationMessage("loanAmount", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        <label for="tenure" class="form-label"><i class="far fa-calendar-alt me-2 text-secondary"></i>Tenure (months):</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-hourglass-half"></i></span>
                            <input type="number" class="form-control no-left-border" id="tenure" name="tenure" required placeholder="Enter tenure in months" min="1">
                        </div>
                        <div id="tenureValidation" class="validation-message"></div>
                        @Html.ValidationMessage("tenure", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        @* New div for Monthly EMI *@
                        <label for="monthlyEmi" class="form-label">
                            <i class=" bi bi-currency-rupee me-2 text-secondary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-currency-rupee text-secondary">
                                    " viewBox="0 0 16 16">
                                    <path d="M4 3.06h2.726c1.22 0 2.12.575 2.325 1.724H4v1.051h5.051C8.855 7.001 8 7.558 6.788 7.558H4v1.317L8.437 14h2.11L6.095 8.884h.855c2.316-.018 3.465-1.476 3.688-3.049H12V4.784h-1.345c-.08-.778-.357-1.335-.793-1.732H12V2H4z" />
                                </svg>
                            </i>Monthly EMI:
                        </label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-wallet"></i></span>
                            <input type="text" class="form-control no-left-border" id="monthlyEmi" disabled readonly>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="totalAmount" class="form-label"><i class="fas fa-calculator me-2 text-secondary"></i>Approx. Total Repayment:</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-equals"></i></span>
                            <input type="text" class="form-control no-left-border" id="totalAmount" name="totalAmount" disabled readonly>
                        </div>
                    </div>

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            <strong>Please correct the following errors:</strong>
                            <ul class="mb-0">
                                @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <li>@modelError.ErrorMessage</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-paper-plane pe-2"></i>Submit Application
                        </button>
                    </div>
                </form>
            }
            else // If showLoanForm is false
            {
                @* The TempData messages are already displayed above. This section adds the link. *@
                @if (!string.IsNullOrEmpty(kycPageLink) && !string.IsNullOrEmpty(kycPageLinkText))
                {
                    <div class="text-center mt-3">
                        @if (!string.IsNullOrEmpty(kycStatus))
                        {
                            <p>Your KYC status: <strong class="@kycStatusClass">@kycStatus</strong></p>
                        }
                        <a href="@kycPageLink" class="btn btn-primary btn-lg">
                            <i class="fas fa-user-shield me-2"></i>@kycPageLinkText
                        </a>
                    </div>
                }
                else if (TempData["ErrorMessage"] == null && TempData["WarningMessage"] == null && TempData["InfoMessage"] == null)
                {
                    // Fallback message if no specific TempData was set but form is still hidden
                    <div class="alert alert-info mt-3">Please ensure your KYC is completed and approved to apply for a loan. Contact support if you believe this is an error.</div>
                }
            }
        </div>
    </div>

    <div class="modal fade" id="restrictionModal" tabindex="-1" aria-labelledby="restrictionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content modal-content-custom">
                <div class="modal-header modal-header-custom">
                    <h5 class="modal-title" id="restrictionModalLabel"><i class="fas fa-exclamation-triangle me-2"></i> Application Restriction</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body modal-body-custom" id="restrictionModalBody"></div>
                <div class="modal-footer modal-footer-custom">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times-circle me-2"></i>Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            const restrictedLoanProducts = @Html.Raw(JsonSerializer.Serialize(restrictedProducts));

        // **NEW**: Modal elements
        const restrictionModalElement = document.getElementById('restrictionModal');
        const restrictionModal = restrictionModalElement ? new bootstrap.Modal(restrictionModalElement) : null;
        const restrictionModalBody = document.getElementById('restrictionModalBody');
            // Check if the form elements are present before adding listeners

            const loanProductNameSelect = document.getElementById("loanProductName");
            const interestRateInput = document.getElementById("interestRate");
            const loanAmountInput = document.getElementById("loanAmount");
            const tenureInput = document.getElementById("tenure");
            const totalAmountInput = document.getElementById("totalAmount");
            const monthlyEmiInput = document.getElementById("monthlyEmi"); // New: Monthly EMI input
            const loanAmountValidationDiv = document.getElementById("loanAmountValidation");
            const tenureValidationDiv = document.getElementById("tenureValidation");
            const loanApplicationForm = document.getElementById("loanApplicationForm");


            let currentMinAmount = 0;
            let currentMaxAmount = Infinity; // Default to no max if not specified
            let currentMaxTenure = Infinity; // Default to no max if not specified

            function formatCurrency(value) {
                // Basic currency formatting, adjust as needed (e.g., for INR)
                return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', minimumFractionDigits: 0, maximumFractionDigits: 2 }).format(value); // Changed to 2 decimal places for EMI
            }

             function resetFormFields() {
            if (interestRateInput) interestRateInput.value = "";
            if (loanAmountInput) { loanAmountInput.value = ""; loanAmountInput.min = 1; loanAmountInput.max = ""; }
            if (tenureInput) { tenureInput.value = ""; tenureInput.max = ""; }
            if (loanAmountValidationDiv) loanAmountValidationDiv.textContent = "";
            if (tenureValidationDiv) tenureValidationDiv.textContent = "";
            currentMinAmount = 0;
            currentMaxAmount = Infinity;
            currentMaxTenure = Infinity;
        }

            function handleProductChange() {
            if (!loanProductNameSelect) return;
            const selectedOption = loanProductNameSelect.options[loanProductNameSelect.selectedIndex];
            const productId = selectedOption.value;

            // Check for restrictions first
            if (productId && restrictedLoanProducts.hasOwnProperty(productId)) {
                const status = restrictedLoanProducts[productId];
                let message = `You have an existing application for '${selectedOption.text}'. Check your Loan Status page for details.`;
                if (status === 'Pending') {
                    message = `You have a <strong class="text-warning">PENDING</strong> application for the '${selectedOption.text}' loan. Please check your Loan Status page for updates before applying again.`;
                } else { // 'Active' or other statuses
                    message = `You already have an <strong class="text-success">ACTIVE</strong> Loan of the type '${selectedOption.text}'. You cannot apply for the same loan product again until the existing one is closed.`;
                }

                if(restrictionModalBody) restrictionModalBody.innerHTML = message;
                if(restrictionModal) restrictionModal.show();

                loanProductNameSelect.value = ""; // Reset dropdown
                resetFormFields();
                calculateLoanDetails(); // Recalculate to clear EMI/Total fields
                return; // Stop further processing
            }

            // If not restricted, update the form fields
            if (selectedOption && productId !== "") {
                interestRateInput.value = (parseFloat(selectedOption.dataset.interestRate) || 0).toFixed(2);
                currentMinAmount = parseFloat(selectedOption.dataset.minAmount) || 0;
                currentMaxAmount = parseFloat(selectedOption.dataset.maxAmount) || Infinity;
                currentMaxTenure = parseInt(selectedOption.dataset.maxTenure) || Infinity;

                loanAmountInput.min = currentMinAmount;
                loanAmountInput.max = currentMaxAmount === Infinity ? "" : currentMaxAmount;
                tenureInput.max = currentMaxTenure === Infinity ? "" : currentMaxTenure;

                validateLoanAmount();
                validateTenure();
            } else {
                resetFormFields();
            }
            calculateLoanDetails();
        }

            function validateLoanAmount() {
                if (!loanAmountInput || !loanAmountValidationDiv) return; // Guard clauses
                const amount = parseFloat(loanAmountInput.value);
                loanAmountValidationDiv.textContent = "";

                if (isNaN(amount) || amount <= 0 && loanAmountInput.value !== "") { // Show error only if something is typed
                    loanAmountValidationDiv.textContent = "Loan amount must be a positive number.";
                } else if (currentMinAmount > 0 && amount < currentMinAmount) {
                    loanAmountValidationDiv.textContent = `Min. amount is ${formatCurrency(currentMinAmount)}.`;
                } else if (currentMaxAmount !== Infinity && amount > currentMaxAmount) {
                    loanAmountValidationDiv.textContent = `Max. amount is ${formatCurrency(currentMaxAmount)}.`;
                }
            }

            function validateTenure() {
                if (!tenureInput || !tenureValidationDiv) return; // Guard clauses
                const tenure = parseInt(tenureInput.value);
                tenureValidationDiv.textContent = "";

                if (isNaN(tenure) || tenure <= 0 && tenureInput.value !== "") {
                    tenureValidationDiv.textContent = "Tenure must be a positive whole number.";
                } else if (currentMaxTenure !== Infinity && tenure > currentMaxTenure) {
                    tenureValidationDiv.textContent = `Max. tenure is ${currentMaxTenure} months.`;
                }
            }

            function calculateLoanDetails() { // Renamed from calculateTotalAmount
                if (!loanAmountInput || !interestRateInput || !tenureInput || !totalAmountInput || !monthlyEmiInput) return; // Guard
                const principal = parseFloat(loanAmountInput.value) || 0;
                const annualRate = parseFloat(interestRateInput.value) || 0; // Annual rate from input
                const tenureMonths = parseInt(tenureInput.value) || 0;

                let totalRepayment = 0;
                let monthlyEmi = 0;

                if (principal > 0 && annualRate >= 0 && tenureMonths > 0) {
                    // It's crucial to use the correct EMI formula for monthly payments.
                    // Simple interest is generally for short-term or specific product types.
                    // For standard loans, EMI (Equated Monthly Installment) is calculated.

                    const monthlyRate = (annualRate / 100) / 12; // Monthly interest rate

                    if (monthlyRate > 0) {
                        monthlyEmi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenureMonths) / (Math.pow(1 + monthlyRate, tenureMonths) - 1);
                        totalRepayment = monthlyEmi * tenureMonths;
                    } else { // If rate is 0
                        monthlyEmi = principal / tenureMonths;
                        totalRepayment = principal;
                    }
                }

                monthlyEmiInput.value = monthlyEmi > 0 ? formatCurrency(monthlyEmi) : "";
                totalAmountInput.value = totalRepayment > 0 ? formatCurrency(totalRepayment) : "";
            }

            // Only add listeners if the elements exist (i.e., if the form is shown)
            if (loanProductNameSelect) {
                loanProductNameSelect.addEventListener("change", handleProductChange);
            }
            if (loanAmountInput) {
                loanAmountInput.addEventListener("input", function() {
                    validateLoanAmount();
                    calculateLoanDetails(); // Call combined calculation function
                });
            }
            if (tenureInput) {
                tenureInput.addEventListener("input", function() {
                    validateTenure();
                    calculateLoanDetails(); // Call combined calculation function
                });
            }

            // Initial call if form is present
            if (showLoanForm) {
                handleProductChange(); // This will also trigger dependant validations and calculations
            }

            if (loanApplicationForm) {
                loanApplicationForm.addEventListener("submit", function(event) {
                    handleProductChange(); // Ensure latest limits are applied for validation
                    validateLoanAmount();
                    validateTenure();

                    // Check custom validation messages
                    let clientSideValid = true;
                    if (loanAmountValidationDiv && loanAmountValidationDiv.textContent !== "") {
                        clientSideValid = false;
                    }
                    if (tenureValidationDiv && tenureValidationDiv.textContent !== "") {
                        clientSideValid = false;
                    }
                    // Check native browser validity for required fields etc.
                    if (!loanApplicationForm.checkValidity()) {
                        clientSideValid = false;
                    }


                    if (!clientSideValid) {
                        event.preventDefault();
                        alert("Please correct the highlighted errors and ensure all required fields are filled before submitting.");
                        // Optionally, trigger Bootstrap's native validation display if you're using it:
                        // loanApplicationForm.classList.add('was-validated');
                    }
                });
            }
        });
    </script>
</body>
</html>