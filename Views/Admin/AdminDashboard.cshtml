@using Newtonsoft.Json
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model CredWise_Trail.Models.ViewModels.AdminDashboardViewModel

@{
    Layout = "~/Views/Shared/AdminUtility.cshtml";

}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Management Dashboard</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
        }

        :root {
            --primary-brand-color: #0A2463;
            --secondary-accent-color: #3E92CC;
        }

        .page-header h2, .page-header .h3 {
            color: var(--primary-brand-color); /* Applied */
            font-weight: 700;
        }

        .text-primary-custom {
            color: #0A2463 !important;
        }

        .btn-outline-primary-custom {
            color: #0A2463;
            border-color: #0A2463;
        }

            .btn-outline-primary-custom:hover {
                background-color: #0A2463;
                color: #fff;
                border-color: #0A2463;
            }


        .card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .1);
            transition: transform 0.2s ease-in-out;
        }

            .card:hover {
                transform: translateY(-5px);
            }

        .card-icon {
            font-size: 2.5rem;
            opacity: 0.7;
        }

        .card-title-custom {
            font-size: 0.9rem;
            font-weight: 500;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }

        .card-text-value {
            font-size: 1.75rem;
            font-weight: bold;
            color: #343a40;
        }


        .chart-container {
            position: relative;
            height: 350px;
            width: 100%;
        }


        .table th {
            font-weight: 600;
        }

        .table td, .table th {
            vertical-align: middle;
        }

        .table-hover tbody tr:hover {
            background-color: #e9ecef;
        }


        .badge.bg-warning {
            color: #000 !important;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-4">
        <div class="page-header mb-4">
            <h2 class="h3"><i class="fas fa-chart-line me-2"></i>Dashboard Overview</h2>
            <p class="text-muted">Loans overview for managing pending, closed, and overdue loans.</p>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-primary-custom me-3">
                            <i class="fas fa-landmark card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Total Loan Value</div>

                            <div class="card-text-value">₹@Model.TotalLoanValue.ToString("N0")</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-success me-3">
                            <i class="fas fa-check-circle card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Active Loans</div>

                            <div class="card-text-value">@(Model.ActiveLoansCount + Model.OverdueLoansCount)</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-warning me-3">
                            <i class="fas fa-spinner card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Pending Applications</div>

                            <div class="card-text-value">@Model.PendingApplicationsCount</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-danger me-3">
                            <i class="fas fa-exclamation-triangle card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Overdue Loans</div>

                            <div class="card-text-value">@Model.OverdueLoansCount</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-7">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-bar me-2"></i>Loan Performance (Monthly)</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="loanPerformanceChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-5">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Loan Status Distribution</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="height: 300px;">
                            <canvas id="loanStatusChart"></canvas>
                        </div>
                        <div class="mt-3 text-center small">
                            <span class="me-2"><i class="fas fa-circle" style="color:#198754;"></i> Active</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#ffc107;"></i> Pending Approval</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#dc3545;"></i> Overdue</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-list-alt me-2"></i>Recent Loan Applications</h5>
                        <a href="@Url.Action("LoanApplications", "Admin")" class="btn btn-sm btn-outline-primary-custom">View All <i class="fas fa-arrow-right ms-1"></i></a>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover table-striped mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Loan No.</th>
                                        <th scope="col">Applicant Name</th>
                                        <th scope="col">Loan Type</th>
                                        <th scope="col">Amount</th>
                                        <th scope="col">Date Submitted</th>
                                        <th scope="col">Approval Status</th>
                                        <th scope="col">Loan Status</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @if (Model.RecentLoanApplications != null && Model.RecentLoanApplications.Any())
                                    {
                                        foreach (var application in Model.RecentLoanApplications)
                                        {
                                            <tr>
                                                <td>@application.LoanNumber</td>
                                                <td>@application.Customer?.Name</td>
                                                <td>@application.LoanProductName</td>
                                                <td>₹@application.LoanAmount.ToString("N0")</td>
                                                <td>@application.ApplicationDate.ToString("yyyy-MM-dd")</td>
                                                <td>
                                                    @{
                                                        string approvalBadgeClass = "bg-secondary";
                                                        if (application.ApprovalStatus?.ToUpper() == "APPROVED")
                                                        {
                                                            approvalBadgeClass = "bg-success";
                                                        }
                                                        else if (application.ApprovalStatus?.ToUpper() == "PENDING")
                                                        {
                                                            approvalBadgeClass = "bg-warning";
                                                        }
                                                        else if (application.ApprovalStatus?.ToUpper() == "REJECTED")
                                                        {
                                                            approvalBadgeClass = "bg-danger";
                                                        }
                                                    }
                                                    <span class="badge @approvalBadgeClass">@application.ApprovalStatus</span>
                                                </td>
                                                <td>
                                                    @{
                                                        string loanStatusBadgeClass = "bg-dark";
                                                        if (application.LoanStatus?.ToUpper() == "ACTIVE")
                                                        {
                                                            loanStatusBadgeClass = "bg-success";
                                                        }
                                                        else if (application.LoanStatus?.ToUpper() == "PENDING")
                                                        {
                                                            loanStatusBadgeClass = "bg-warning";
                                                        }
                                                        else if (application.LoanStatus?.ToUpper() == "OVERDUE")
                                                        {
                                                            loanStatusBadgeClass = "bg-danger";
                                                        }
                                                        else if (application.LoanStatus?.ToUpper() == "CLOSED")
                                                        {
                                                            loanStatusBadgeClass = "bg-light text-dark";
                                                        }
                                                    }
                                                    <span class="badge @loanStatusBadgeClass">@application.LoanStatus?.Replace("_", " ")</span>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="text-center">No recent loan applications found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {

            const loanPerformanceCtx = document.getElementById('loanPerformanceChart');
            if (loanPerformanceCtx) {
                new Chart(loanPerformanceCtx, {
                    type: 'bar',
                    data: {
                        labels: @Html.Raw(JsonConvert.SerializeObject(Model.MonthlyLabels)),
                        datasets: [{
                            label: 'New Loans (₹k)',
                            data: @Html.Raw(JsonConvert.SerializeObject(Model.NewLoansMonthlyData)),
                            backgroundColor: '#0A2463',
                            borderColor: '#0A2463',
                            borderWidth: 1,
                            borderRadius: 5,
                            barPercentage: 0.7,
                            categoryPercentage: 0.7
                        },
                        {
                            label: 'Repayments (₹k)',
                            data: @Html.Raw(JsonConvert.SerializeObject(Model.RepaymentsMonthlyData)),
                            backgroundColor: '#198754',
                            borderColor: '#198754',
                            borderWidth: 1,
                            borderRadius: 5,
                            barPercentage: 0.7,
                            categoryPercentage: 0.7
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: { color: '#e9ecef' },
                                ticks: {
                                    callback: function (value) {
                                        return '₹' + value + 'k';
                                    }
                                }
                            },
                            x: {
                                grid: { display: false }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    pointStyle: 'circle'
                                }
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function (context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += '₹' + context.parsed.y + 'k';
                                        }
                                        return label;
                                    }
                                }
                            }
                        },
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                    }
                });
            }


            const loanStatusCtx = document.getElementById('loanStatusChart');
            if (loanStatusCtx) {
                new Chart(loanStatusCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(JsonConvert.SerializeObject(Model.LoanStatusLabels)),
                        datasets: [{
                            label: 'Loan Status',
                            data: @Html.Raw(JsonConvert.SerializeObject(Model.LoanStatusCounts)),
                            backgroundColor: [
                                '#198754',
                                '#ffc107',
                                '#dc3545'
                            ],
                            borderColor: '#fff',
                            borderWidth: 2,
                            hoverOffset: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '70%',
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        let label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed !== null) {
                                            label += context.parsed;
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }
        });
    </script>
</body>
</html>